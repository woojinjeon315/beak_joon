https://www.acmicpc.net/problem/2667

#include<stdio.h>

//https://www.acmicpc.net/problem/2667//;


//int arr[25][25];
int map_size = 0;

void input() {
	scanf_s("%d", &map_size);
	int* arr = new int[map_size];
	delete[] arr;

	for (int y; y <= 7; y++) {
		scanf_s("%d", &arr[7][0]);

		for (int x; x <= 7; x++) {

		}
	}
}

################

#include<stdio.h>

//https://www.acmicpc.net/problem/2667


//int arr[25][25];
int map_size = 0;
int input = 0;

void input() {
	scanf_s("%d", &map_size);

	int* arr = new int[map_size];
	delete[] arr;

	for (int y = 0; y <= 7; y++) {
		for (int x = 0; x <= 7; x++) {
			scanf_s("%d", input);
			arr[y][x] = input;
		}
	}
}

int near_scan(int x, int y) {
	if (x <= 1 && arr[y][x - 1] == 1) {
		return x - 1, y;
	}
	if (y <= 1 && arr[y - 1][x] == 1) {
		return x, y - 1;
	}
	if (x >= map_size - 1 && arr[y][x + 1] == 1) {
		return x + 1, y;
	}
	if (y >= map_size - 1 && arr[y + 1][x] == 1) {
		return x, y + 1;
	}
}

void play() {
	for (int y = 0; y <= 7; y++) {
		for (int x = 0; x <= 7; x++) {
			if (arr[y][x] == 1);

		}
	}
}

void main() {
}




void main() {
}

#include<stdio.h>

//https://www.acmicpc.net/problem/2667


//int arr[25][25];
int map_size = 0;
int input = 0;

int place[1000][2];

int town_count = 0;

void input() {
	scanf_s("%d", &map_size);

	int* arr = new int[map_size];
	delete[] arr;

	for (int y = 0; y <= 7; y++) {
		for (int x = 0; x <= 7; x++) {
			scanf_s("%d", input);
			arr[y][x] = input;
		}
	}
}

//int near_scan(int x, int y) {
//	if (x <= 1 && arr[y][x - 1] == 1) {
//		return x - 1, y;
//	}
//	if (y <= 1 && arr[y - 1][x] == 1) {
//		return x, y - 1;
//	}
//	if (x >= map_size - 1 && arr[y][x + 1] == 1) {
//		return x + 1, y;
//	}
//	if (y >= map_size - 1 && arr[y + 1][x] == 1) {
//		return x, y + 1;
//	}
//}
//
//void play() {
//	for (int y_turn = 0; y_turn <= map_size; y_turn++) {
//		for (int x_turn = 0; x_turn <= map_size; x_turn++) {
//			if (arr[y_turn][x_turn] == 1);
//
//		}
//	}
//}

void play() {
	int turn = 0;
	for (int y_turn = 0; y_turn <= map_size; y_turn++) {
		for (int x_turn = 0; x_turn <= map_size; x_turn++) {
			if (arr[y_turn][x_turn] == 1);
				place[turn][0] = x_turn;
				place[turn][1] = y_turn;
				turn += 1;
		}
	}
}

void main() {
}




